'use strict';

var gulp = require('gulp');
var plugins = require('gulp-load-plugins')();
var rimraf = require('rimraf');
var browserSync = require('browser-sync');
var runSequence = require('run-sequence');
var karma = require('karma').server;
var historyApiFallback = require('connect-history-api-fallback');

// DEVELOPMENT TASKS
//================================================

/*
 * 1. Setup a webserver with livereload using BrowserSync
 * 2. JS and CSS get processed and served from the 'build' folder
 * 3. Compile sass files, autoprefix and put in 'build' folder
 * */

// BrowserSync Server
gulp.task('browser-sync', function () {
  browserSync.init(
    {
      files: [ // files to watch
        './index.html',
        './src/scripts/**/*.js',
        './build/css/*.css'
      ],
      notify: false,
      server: {
        baseDir: './',
        middleware: [historyApiFallback] // https://github.com/BrowserSync/browser-sync/issues/204#issuecomment-60410751
      },
      port: 3500
    });
});

// Sass
gulp.task('sass', function () {
  return gulp.src('./src/styles/main.scss')
    .pipe(plugins.sourcemaps.init())
    .pipe(plugins.sass())
    .pipe(plugins.sourcemaps.write({includeContent: false}))
    .pipe(plugins.sourcemaps.init({loadMaps: true})) // Load sourcemaps generated by sass
    .pipe(plugins.autoprefixer({
      browsers: ['last 2 versions']
    }))
    .on('error', plugins.util.log)
    .pipe(plugins.sourcemaps.write())
    .pipe(gulp.dest('./build/css'))
    .on('error', plugins.util.log);
});

// Assets
gulp.task('assets', function () {
  return gulp.src('./src/assets/**/*.*')
    .pipe(gulp.dest('./build/assets'))
    .on('error', plugins.util.log);
});

// serve task
gulp.task('serve', ['browser-sync', 'sass', 'assets'], function () {
  gulp.watch('./src/styles/**/*.scss', ['sass']);
});

// Delete build Directory
gulp.task('delete-build', function (cb) {
  rimraf('./build', cb);
});

//build (no server)
gulp.task('build', function (cb) {
  runSequence('delete-build', 'sass', 'assets', cb)
});

// Default
gulp.task('default', function (cb) {
  runSequence('delete-build', 'serve', cb);
});

// Tests
gulp.task('test', function (done) {
  karma.start({
    configFile: __dirname + '/karma.conf.js'
  }, done);
});


// DISTRIBUTION TASKS
//===============================================

// Delete dist Directory
gulp.task('delete-dist', function () {
  rimraf('./dist', function (err) {
    plugins.util.log(err);
  });
});

// CSS
gulp.task('css', function () {
  return gulp.src('./build/css/main.css')
    .pipe(gulp.dest('./dist/css'))
    .pipe(plugins.csso())
    .pipe(plugins.rename('main.min.css'))
    .pipe(gulp.dest('./dist/css'))
    .on('error', plugins.util.log);
});

// Copy index.html to 'dist'
gulp.task('html', function () {
  gulp.src(['./index.html'])
    .pipe(gulp.dest('./dist'))
    .on('error', plugins.util.log);
});

// Bundle with jspm
gulp.task('bundle', plugins.shell.task([
  'jspm bundle-sfx src/scripts/main dist/js/app.js'
]));

// Uglify the bundle
gulp.task('uglify', function () {
  return gulp.src('./dist/js/app.js')
    .pipe(plugins.sourcemaps.init({loadMaps: true}))
    .pipe(plugins.uglify())
    .pipe(plugins.sourcemaps.write('.'))
    .pipe(plugins.rename('app.min.js'))
    .pipe(gulp.dest('./dist/js'))
    .on('error', plugins.util.log);
});

gulp.task('dist', function () {
  runSequence(
    'delete-dist',
    'build',
    ['css', 'html', 'bundle'],
    'uglify'
  );
});

// DOCS TASKS
//===============================================

// Install rvm and then install hologram into the global rvm gemset. Bundler will find it.
gulp.task('style-guide', ['style-guide:sass'], function () {
  // Delete dir first because hologram has a bug where it'll keep nesting its outputs.
  rimraf('./docs/style_guide/out', function (err) {
    plugins.util.log(err);
  });

  return gulp.src('hologram_config.yml')
    .pipe(plugins.hologram({bundler: true, logging: true}))
    .on('error', plugins.util.log)
});

gulp.task('style-guide:sass', function () {
  return gulp.src('./docs/style_guide/src/styles/main.scss')
    .pipe(plugins.sourcemaps.init())
    .on('error', plugins.util.log)
    .pipe(plugins.sass())
    .pipe(plugins.sourcemaps.write())
    .pipe(gulp.dest('./docs/style_guide/doc_assets/static/css'))
});
