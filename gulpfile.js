'use strict';

var gulp               = require('gulp');
var plugins            = require('gulp-load-plugins')();
var rimraf             = require('rimraf');
var browserSync        = require('browser-sync');
var runSequence        = require('run-sequence');
var karma              = require('karma').server;
var historyApiFallback = require('connect-history-api-fallback');
var jspm               = require('jspm');
var del                = require('del');
var cp                 = require('child_process');

// ENVIRONMENT
//================================================

// this is used for config files, identifying which one to use.
var settingsModule = process.env.SETTINGS_MODULE;
if (!settingsModule) {
  settingsModule = process.env.SETTINGS_MODULE = "demo";
  console.warn("Missing SETTINGS_MODULE environment variable. Assuming demo.");
}
// this is used for preprocessing. index.html has diff scripts depending on the build type.
var buildType = process.env.BUILD_TYPE;
if (!buildType) {
  // The reason I am setting the env var here is so that other tools, like gulp-preprocessor, can preprocess files.
  buildType = process.env.BUILD_TYPE = "local";
  console.warn("Missing BUILD_TYPE environment variable. Assuming local.");
}

var firebaseDestination = process.env.FIREBASE_DESTINATION;
if (!firebaseDestination) {
  firebaseDestination = process.env.FIREBASE_DESTINATION = "hermes-qa";
  console.warn("Missing FIREBASE_DESTINATION environment variable. Assuming " + firebaseDestination + ".");
}

var deployDemoAssets = process.env.DEPLOY_DEMO_ASSETS;
if (!deployDemoAssets) {
  // The reason I am setting the env var here is so that other tools, like gulp-preprocessor
  deployDemoAssets = process.env.DEPLOY_DEMO_ASSETS = false;
  console.warn("Missing DEPLOY_DEMO_ASSETS environment variable. Assuming " + deployDemoAssets + ".");
}
else {
  // cast to bool
  deployDemoAssets = deployDemoAssets === "true";
}

// DEVELOPMENT TASKS
//================================================

/*
 * 1. Setup a webserver with livereload using BrowserSync
 * 2. JS and CSS get processed and served from the 'build' folder
 * 3. Compile sass files, autoprefix and put in 'build' folder
 * */

// BrowserSync Server
gulp.task('browser-sync', function () {
  browserSync.init(
    {
      files: [ // files to watch
        //'./build/index.html',
        //'./src/scripts/**/*.js',
        './build/css/*.css'
      ],
      notify: true, // true might make it faster - https://github.com/BrowserSync/browser-sync/issues/155
      server: {
        baseDir: ['./', './build', './jspm_packages'],
        index: "./build/index.html",
        middleware: [historyApiFallback({index: "./build/index.html"})] // https://github.com/BrowserSync/browser-sync/issues/204#issuecomment-60410751
      },
      port: 3500
    });
});

gulp.task('hot-reload', function () {
  require('chokidar-socket-emitter/cli');
});

// Js
gulp.task('js', function () {

  return gulp.src('src/scripts/settings/' + settingsModule + '.js')
    .pipe(plugins.cached('js'))  //Process only changed files
    .pipe(plugins.rename('container.js')) // this container.js is imported in main.js
    .on('error', plugins.util.log)
    .pipe(gulp.dest('build/js'));
});

// Sass
gulp.task('sass', function () {
  var includeContent = process.env.BUILD_TYPE === 'local';

  // https://github.com/ByScripts/gulp-sample/blob/master/gulpfile.js
  // https://github.com/floridoo/gulp-sourcemaps/issues/60
  return gulp.src('./src/styles/main.scss')
    .pipe(plugins.sourcemaps.init())
    .pipe(plugins.sass())
    .pipe(plugins.sourcemaps.write({includeContent: false})) //includeContent refers to "sourcesContent" http://stackoverflow.com/questions/19802462/do-source-maps-include-the-source-text
    .pipe(plugins.sourcemaps.init({loadMaps: true})) // Load sourcemaps generated by sass
    .pipe(plugins.autoprefixer({
      browsers: ['last 2 versions']
    }))
    .pipe(plugins.sourcemaps.write('.', {includeContent: includeContent})) // Write out sourcemaps to own file
    .pipe(gulp.dest('./build/css'))
});

// Assets
gulp.task('assets', function () {
  var src = ['./src/assets/**/*.*'];

  if (!deployDemoAssets) {
    src.push('!./src/assets/images/client-side/**/*.*');
  }

  return gulp.src(src)
    .pipe(gulp.dest('./build/assets'))
    .on('error', plugins.util.log);
});

// HTML
gulp.task('html', function () {
  return gulp.src('./index.html')
    .pipe(plugins.preprocess())
    .on('error', plugins.util.log)
    .pipe(gulp.dest('./build'));
});

// serve task
gulp.task('serve', function () {
  process.env.BUILD_TYPE = 'local'; // gulp-preprocessor will use this env var when compiling index.html, assets, etc.
  console.info('BUILD_TYPE forcibly set to local')

  runSequence(['browser-sync', 'hot-reload', 'js', 'sass', 'assets', 'html']);

  gulp.watch('./index.html', ['html']);
  gulp.watch('./src/scripts/settings/**/*.js', ['js']);
  gulp.watch('./src/styles/**/*.scss', ['sass']);
});

// Delete build Directory
gulp.task('delete-build', function (cb) {
  rimraf('./build', cb);
});

//build (no server)
gulp.task('build', function (cb) {
  runSequence('delete-build', 'js', 'sass', 'assets', 'html', cb);
});

// Default
gulp.task('default', function (cb) {
  runSequence('delete-build', 'serve', cb);
});

// Tests
gulp.task('test', function (done) {
  karma.start({
    configFile: __dirname + '/karma.conf.js'
  }, done);
});


// DISTRIBUTION TASKS
//===============================================

// Delete dist Directory
gulp.task('delete-dist', function (cb) {
  rimraf('./dist', cb);
});

gulp.task('css', function () {
  return gulp.src('./build/css/main.css')
    .pipe(plugins.sourcemaps.init({loadMaps: true})) // Load sourcemaps generated by sass
    .pipe(plugins.csso())
    .pipe(plugins.sourcemaps.write('.', {includeContent: false})) //includeContent refers to "sourcesContent" http://stackoverflow.com/questions/19802462/do-source-maps-include-the-source-text
    .pipe(gulp.dest('./dist/css'))
    .on('error', plugins.util.log);
});

// Copy index.html to 'dist'
gulp.task('html-dist', function () {
  return gulp.src(['./build/index.html'])
    .pipe(gulp.dest('./dist'))
    .on('error', plugins.util.log);
});

// Copy index.html to 'dist'
gulp.task('assets-dist', function () {
  return gulp.src('./build/assets/**/*.*')
    .pipe(gulp.dest('./dist/assets'))
    .on('error', plugins.util.log);
});

// Bundle with jspm
// https://60devs.com/custom-ember-dev-workflow-using-jspm.html
// https://github.com/jspm/jspm-cli/blob/b454d33c8a53bfd871f9c03c9a47122a0719016f/docs/api.md
gulp.task('bundle', function () {
  var builder = new jspm.Builder();
  return builder.bundle('./src/scripts/main + src/scripts/apps/feedback/components/loading/loading-feedback + bootstrap', './build/js/app.js', { // this returns a promise, which gulp can interpret
    mangle: false, minify: false,
    sourceMaps: true, lowResSourceMaps: true
  });
});

// Uglify the bundle
// http://stackoverflow.com/questions/24591854/using-gulp-to-concatenate-and-uglify-files
gulp.task('uglify', function () {
  return gulp.src(['./jspm_packages/system.src.js', './jspm.browser.js', 'jspm.config.js', './build/js/app.js'])
    .pipe(plugins.sourcemaps.init({loadMaps: true}))
    .pipe(plugins.concat('app.js'))
    .pipe(plugins.uglify())
    .pipe(plugins.sourcemaps.write('.', {includeContent: false}))
    .pipe(gulp.dest('./dist/js'))
    .on('error', plugins.util.log);
});

gulp.task('fingerprint', function (done) {
  var options = {};

  options.replacer = function (fragment, replaceRegExp, newReference, referencedFile) {

    var referringFileIsHTML = /^<!DOCTYPE/i.test(fragment.contents); // is html file
    var referencedFileIsJS  = referencedFile.revFilenameExtOriginal === ".js";
    var shouldSkipReference = !referringFileIsHTML && referencedFileIsJS;

    if (!shouldSkipReference) {
      // there are cases where the word 'app' was replaced because the filename of our project was app.
      // Lets create a rule where .js references (the path to be replaced) should only be replaced in certain conditions:
      // * The referer file (the one who references a hashed file) must be HTML.

      // this code below is copied straight from the rev-all lib
      fragment.contents = fragment.contents.replace(replaceRegExp, '$1' + newReference + '$3$4');
    }
  };

  options.dontRenameFile = [/^\/favicon.ico$/g, '.html'];

  var revAll = new plugins.revAll(options);

  var stream = gulp.src('./dist/**')
    .pipe(revAll.revision())
    .pipe(gulp.dest('./dist'))
    .pipe(revAll.manifestFile())
    .pipe(gulp.dest('./dist'))
    .on('error', plugins.util.log);

  // https://github.com/smysnk/gulp-rev-all/issues/90
  stream.on('end', function () {
    var manifest      = require('./dist/rev-manifest.json');
    var originalFiles = [];

    console.log("The following files will be replaced with a fingerprtined version:");

    for (var origFileName in manifest) {
      if (origFileName != manifest[origFileName]) { // For all files busted/renamed
        originalFiles.push('./dist/' + origFileName);       // Add the original filename to the list
        console.log(origFileName);
      }
    }
    // Using npm 'del' package in this case to remove original files
    del(originalFiles, done);     // Delete all originals files the were not busted/renamed
  });
  stream.on('error', done);
});

gulp.task('firebase', function (done) {
  // http://stackoverflow.com/questions/12941083/get-the-output-of-a-shell-command-in-node-js
  // http://stackoverflow.com/questions/3631005/git-log-tabular-formatting
  var processFirebaseConfigStream =
        gulp.src('./src/scripts/resources/deployment/firebase/firebase.json')
          .pipe(plugins.preprocess())
          .pipe(gulp.dest('./dist'));

  processFirebaseConfigStream.on('end', function () {
    deploy(); // defined below
  });

  processFirebaseConfigStream.on('error', function (err) {
    done(err);
  });

  function deploy() {

    cp.exec("git log -1 HEAD --pretty=format:'%h: %s'", function (error, stdout, stderr) {
      // this allows us to get the most recent commit hash and message.
      if (error) {
        done(error);
      }
      else {
        var deployDescription     = stdout;
        var firebaseDeployCommand = "/usr/local/bin/node ../node_modules/firebase-tools/bin/firebase deploy -m '" + deployDescription + "'";

        var fbDeployOptions = {
          cwd: './dist' // The reason we cwd into 'dist' is because the firebase.json file uses relative paths. The command (firebaseDeployCommand) also uses rel paths.
        }

        const fbcp = cp.exec(firebaseDeployCommand, fbDeployOptions, function (error, stdout, stderr) {

          if (error) {
            console.log("error deploying firebase:", error);
            done(error);
          }
          else {
            console.log("firebase deployed successfully: ", stdout);
            done();
          }
        });

        fbcp.stdout.on('data', data => console.log(data.toString()));
      }
    });
  }
});

gulp.task('deploy', function (done) {
  runSequence('dist', 'firebase', done);
});

gulp.task('dist', function (cb) {
  process.env.BUILD_TYPE = 'server'; // Just assume that distribution is for the purposes of hosting on a real server.
  // gulp-preprocessor will use this env var when compiling index.html, assets, etc.
  console.info('BUILD_TYPE forcibly set to server')

  runSequence(
    'delete-dist',
    'build',
    ['assets-dist', 'css', 'html-dist', 'bundle'],
    'uglify',
    'fingerprint',
    cb
  );
});

// DOCS TASKS
//===============================================

// Install rvm and then install hologram into the global rvm gemset. Bundler will find it.
gulp.task('style-guide', ['style-guide:sass'], function () {
  // Delete dir first because hologram has a bug where it'll keep nesting its outputs.
  rimraf('./docs/style_guide/out', function (err) {
    plugins.util.log(err);
  });

  return gulp.src('hologram_config.yml')
    .pipe(plugins.hologram({bundler: true, logging: true}))
    .on('error', plugins.util.log)
});

gulp.task('style-guide:sass', function () {
  return gulp.src('./docs/style_guide/src/styles/main.scss')
    .pipe(plugins.sourcemaps.init())
    .on('error', plugins.util.log)
    .pipe(plugins.sass())
    .pipe(plugins.sourcemaps.write())
    .pipe(gulp.dest('./docs/style_guide/doc_assets/static/css'))
});
